AC_PREREQ(2.61)
AC_INIT([dmcs],[0.1.0],[(dao|tkren)@kr.tuwien.ac.at])
AC_CONFIG_SRCDIR([src/dmcsd.cpp])
AC_CONFIG_HEADER([config.h])

AC_CANONICAL_HOST


#
# the user didn't supply a path for dlv
#
if test "$CLASP" = ""; then
    # we assume "clasp"
    CLASP=clasp
    # and check if it exists
    AC_CHECK_PROG(CLASPPATH, $CLASP, $CLASP, notfound)
else
    # the user supplied a 'CLASP=...'
    # check if it exists (with search path=/, since the user supplied
    # an entire path!) and set CLASPPATH to it!
    AC_CHECK_PROG(CLASPPATH, $CLASP, $CLASP, notfound, [/])
fi

if test "$CLASPPATH" = notfound; then
    AC_MSG_ERROR([clasp not found, get it from http://www.cs.uni-potsdam.de/clasp/])
fi


AC_MSG_CHECKING([for clasp version]) # check for clasp >= 1.3.4

CLASPVERSION=`$CLASPPATH --version 2>&1 | sed -ne 's/^.*clasp[[^0-9]]*//p'`
CLASPMAJOR=`echo $CLASPVERSION | sed "s/^\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/"`
CLASPMINOR=`echo $CLASPVERSION | sed "s/^\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/"`
CLASPMICRO=`echo $CLASPVERSION | sed "s/^\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/"`

AC_MSG_RESULT([$CLASPVERSION])

# for check clasp >= 1.99.68 we have to do some arithmetic here, but
# for now it's good enough
if test "$CLASPMAJOR"0"$CLASPMINOR"0"$CLASPMICRO" -lt 10304; then 
   AC_MSG_ERROR([could not find clasp >= 1.3.4, please upgrade])
fi

#
# put the clasp path into config.h
#
AC_DEFINE_UNQUOTED(CLASPPATH,"$CLASPPATH",[Path of clasp executable])


DX_HTML_FEATURE([ON])
DX_CHM_FEATURE([OFF])
DX_CHI_FEATURE([OFF])
DX_MAN_FEATURE([OFF])
DX_RTF_FEATURE([OFF])
DX_XML_FEATURE([OFF])
DX_PDF_FEATURE([OFF])
DX_PS_FEATURE([OFF])
DX_INIT_DOXYGEN([dmcs], [doxygen.cfg], [doc])


AM_INIT_AUTOMAKE

# Check for C/C++ compiler
AC_PROG_CC
AC_PROG_CXX
AC_PROG_CXXCPP

# set default warning parameters for g++ compatible compilers
if test "$GXX" = "yes"; then
   CXXFLAGS="$CXXFLAGS -W -Wall"
fi

# Checks for header files.
AC_HEADER_DIRENT
AC_CHECK_HEADERS([sys/param.h])

# by default we look into /opt/local and /sw for include files (macports vs. fink)
#case $host_os in
#     darwin*|macosx*)
#	CPPFLAGS="$CPPFLAGS -I/opt/local/include -I/sw/include"
#     ;;
#esac 


AC_PROG_LIBTOOL
AC_CONFIG_MACRO_DIR([m4])

#
# Check for external libraries
#

# checking for boost libs
BOOST_REQUIRE([1.42.0])
BOOST_SMART_PTR
BOOST_STRING_ALGO
BOOST_TOKENIZER
BOOST_IOSTREAMS
BOOST_GRAPH #right now, we don't care about the libboost-graph shared library
BOOST_PROGRAM_OPTIONS
BOOST_SYSTEM
BOOST_THREADS
BOOST_SERIALIZATION
BOOST_TEST
BOOST_DATE_TIME

# debug
AC_ARG_ENABLE(debug,
              [  --enable-debug          switch on debug routines (timers, ...)],
              [AC_DEFINE(DEBUG, [], [Turns on timer routines for profiling])
               debug_support=yes]
              )

# output autogenerated files
AC_CONFIG_FILES([
           Makefile 
           include/Makefile
           include/dmcs/Makefile
           include/dyndmcs/Makefile
           include/generator/Makefile
           include/loopformula/Makefile
           include/network/Makefile
           include/parser/Makefile
           src/Makefile
           src/dmcs/Makefile
           src/dyndmcs/Makefile
           src/generator/Makefile
           src/network/Makefile
           src/loopformula/Makefile
           src/parser/Makefile
           testsuite/Makefile
])


AC_OUTPUT

dnl output configuration
cat <<EOF
 
$PACKAGE_TARNAME $PACKAGE_VERSION configuration:

 - Compiler settings
 CC: $CC
 CXX: $CXX
 CFLAGS: $CFLAGS
 CPPFLAGS: $CPPFLAGS
 CXXFLAGS: $CXXFLAGS
 LDFLAGS: $LDFLAGS

 - Path settings
 prefix: $prefix
 exec_prefix: $exec_prefix

 bindir: $bindir
 libdir: $libdir
 pkglibdir: $libdir/$PACKAGE_TARNAME
 datadir: $datadir

 - Using the following binaries:
 clasp: $CLASPPATH

 - Using the following libraries:
 Boost: $boost_major_version $BOOST_CPPFLAGS

 - Options:
 Debug: $debug_support

EOF
